@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<MudThemeProvider IsDarkMode="_IsDarkModeEnabled" Theme="CustomTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<CascadingValue Value="_IsDarkModeEnabled">
    <MudLayout>
        <MudAppBar Elevation="1" Style="@BackgroundColorStyle" Class="d-flex justify-center flex-grow-1 gap-4">
            <MudGrid>
                <MudItem xs="4" class="d-flex justify-start">
                    <MudIconButton Class="d-flex justify-start" Icon="@Icons.Material.Filled.Menu" Color="(_IsDarkModeEnabled ? Color.Default : Color.Dark)" Edge="Edge.Start" OnClick="ToggleDrawer" />
                </MudItem>
                <MudItem xs="4" class="d-flex justify-center">
                    <ModelSelectorDropdown />
                </MudItem>
                <MudItem xs="4" class="d-flex justify-end">
                    <MudToggleIconButton Class="d-flex justify-end" Toggled="@_IsDarkModeEnabled" ToggledChanged="ToggleDarkMode" Icon="@Icons.Material.Filled.LightMode" Color="Color.Dark" ToggledIcon="@Icons.Material.Outlined.DarkMode" />
                </MudItem>
            </MudGrid>
        </MudAppBar>
        <Drawer IsDrawerOpen="@_isDrawerOpen" OnAvatarClick="ToggleAssistantsDrawer" OnActionsClick="ToggleActionsDrawer" OnSettingsClick="ToggleSettingsDrawer" />
        <AssistantsDrawer IsOpen="_isAssistantsDrawerOpen" IsOpenChanged="HandleAssistantsDrawerStateChanged" />
        <ActionsDrawer IsOpen="_isActionsDrawerOpen" IsOpenChanged="HandleActionsDrawerStateChanged" />
        <SettingsDrawer IsOpen="_isSettingsDrawerOpen" IsOpenChanged="HandleSettingsDrawerStateChanged" />
        <MudMainContent Style="display: flex; flex-direction: column; height: 100vh;">
            <CustomErrorBoundary>
                <ChildContent>
                    @Body
                </ChildContent>
                <ErrorContent Context="errorDetails">
                    @{
                        ShowErrorSnackbar(@errorDetails.Message);
                        @Body
                    }
                </ErrorContent>
            </CustomErrorBoundary>
        </MudMainContent>
    </MudLayout>
</CascadingValue>

@code 
{
    private const string darkModeStorageKey = "darkMode";

    private bool _IsDarkModeEnabled = false;
    private bool _isDrawerOpen = true;
    private bool _isAssistantsDrawerOpen = false;
    private bool _isActionsDrawerOpen = false;
    private bool _isSettingsDrawerOpen = false;

    private string BackgroundColorStyle => $"background-color: {(_IsDarkModeEnabled ? "#27272f" : "#e7e5e4")};";

    protected override async Task OnInitializedAsync()
    {
        var darkModeValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", darkModeStorageKey);

        if (!string.IsNullOrEmpty(darkModeValue))
        {
            _IsDarkModeEnabled = bool.Parse(darkModeValue);
        }
    }

    private async Task ToggleDarkMode()
    {
        _IsDarkModeEnabled = !_IsDarkModeEnabled;

        await JSRuntime.InvokeVoidAsync("localStorage.setItem", darkModeStorageKey, _IsDarkModeEnabled);
    }

    private void ToggleDrawer() => _isDrawerOpen = !_isDrawerOpen;

    private void ToggleAssistantsDrawer() => _isAssistantsDrawerOpen = !_isAssistantsDrawerOpen;
    private void ToggleActionsDrawer() => _isActionsDrawerOpen = !_isActionsDrawerOpen;
    private void ToggleSettingsDrawer() => _isSettingsDrawerOpen = !_isSettingsDrawerOpen;

    private void HandleAssistantsDrawerStateChanged(bool isOpen) => _isAssistantsDrawerOpen = isOpen;
    private void HandleActionsDrawerStateChanged(bool isOpen) => _isActionsDrawerOpen = isOpen;
    private void HandleSettingsDrawerStateChanged(bool isOpen) => _isSettingsDrawerOpen = isOpen;

    private void ShowErrorSnackbar(string message)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;

        Snackbar.Add(message, Severity.Error, options =>
        {
            options.HideTransitionDuration = 100;
        });
    }

    MudTheme CustomTheme = new MudTheme()
    {
        Palette = new PaletteLight()
        {
            Tertiary = "#fff",
        },
        PaletteDark = new PaletteDark()
        {
            Tertiary = "#fff",
        },
    };
}
