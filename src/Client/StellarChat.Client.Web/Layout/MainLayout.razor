@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<MudThemeProvider IsDarkMode="_IsDarkModeEnabled" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer" />
        <MudSpacer />
        <MudToggleIconButton Toggled="@_IsDarkModeEnabled" ToggledChanged="ToggleDarkMode" Icon="@Icons.Material.Filled.LightMode" Color="Color.Inherit" ToggledIcon="@Icons.Material.Outlined.DarkMode" />
    </MudAppBar>

    <Drawer IsDrawerOpen="@_isDrawerOpen" />
    <MudMainContent>
        <CustomErrorBoundary>
            <ChildContent>
                @Body
            </ChildContent>
            <ErrorContent Context="errorDetails">
                @{
                     ShowErrorSnackbar(@errorDetails.Message);
                     @Body
                }
            </ErrorContent>
        </CustomErrorBoundary>
    </MudMainContent>
</MudLayout>

@code 
{
    private const string darkModeStorageKey = "darkMode";

    private bool _IsDarkModeEnabled = false;
    private bool _isDrawerOpen = true;

    protected override async Task OnInitializedAsync()
    {
        var darkModeValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", darkModeStorageKey);

        if (!string.IsNullOrEmpty(darkModeValue))
        {
            _IsDarkModeEnabled = bool.Parse(darkModeValue);
        }
    }

    private async Task ToggleDarkMode()
    {
        _IsDarkModeEnabled = !_IsDarkModeEnabled;

        await JSRuntime.InvokeVoidAsync("localStorage.setItem", darkModeStorageKey, _IsDarkModeEnabled);
    }

    private void ToggleDrawer() => _isDrawerOpen = !_isDrawerOpen;

    private void ShowErrorSnackbar(string message)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;

        Snackbar.Add(message, Severity.Error, options =>
        {
            options.HideTransitionDuration = 100;
        });
    }
}
