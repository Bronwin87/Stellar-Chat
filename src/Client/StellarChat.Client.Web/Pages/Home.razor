@page "/"
@page "/c/{ChatId:guid}"

@inject ChatState _chatState
@inject IChatService _chatService
@inject NavigationManager _navigationManager
@inject IJSRuntime JS
@inject TimeProvider _clock
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<div class="h-100">
    <div class="w-100 mt-4 mx-auto" style="max-width: 960px;">
        <div @ref="ChatMessagesDiv" id="chat-messages" class="overflow-auto" style="height: calc(100vh - 295px);">
            @if (_chatState.ChatId == Guid.Empty)
            {
                <div style="height: 100%; width: 100%; display: flex; justify-content: center;">
                    <NewChatPreview AssistantName="Sophia" UserName="Kris" AssistantAvatar="https://th.bing.com/th/id/OIG3.PYK1.ctv1ceJsoR9RZxZ?w=270&h=270&c=6&r=0&o=5&dpr=1.1&pid=ImgGn" />
                </div>
            }
            else
            {
                @foreach (var chatMessage in ChatMessages)
                {
                    <ChatMessage Message=@chatMessage />
                }
            }
        </div>
    </div>
    <div class="mt-2 fixed-bottom w-auto">
        <PromptInput OnSend="@SendMessage" />
    </div>
</div>

@code 
{
    [Parameter] public Guid? ChatId { get; set; }

    private List<ChatMessageResponse> ChatMessages { get; set; } = new();
    private ElementReference ChatMessagesDiv { get; set; } = new();
    private ChatMessageResponse LatestBotMessage { get; set; } = new();
    private StringBuilder _textStreaming = new();
    private HubConnection? _hubConnection;

    private const string ReceiveMessageUpdateServerCall = "ReceiveChatMessageChunk";
    private const string AddClientToGroupServerCall = "AddClientToGroupAsync";
    private const string HubUrl = "https://localhost:7057/hub";

    protected override async Task OnInitializedAsync()
    {
        _chatState.ChatIdChanged += async () => await LoadChatHistory();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(HubUrl)
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>(ReceiveMessageUpdateServerCall, async (message) =>
        {
            _textStreaming.Append(message);
            LatestBotMessage.Content = _textStreaming.ToString();

            await InvokeAsync(StateHasChanged);
            await JS.InvokeVoidAsync("scrollToBottom", ChatMessagesDiv);

            Console.WriteLine($"ReceiveChatMessageChunk: {message}");
        });

        Console.WriteLine("Starting connection...");

        await _hubConnection.StartAsync();

        Console.WriteLine($"Connection state: {_hubConnection.State}");
        
        if (ChatId.HasValue && ChatId != Guid.Empty)
        {
            _chatState.SetChatId(ChatId.Value);
            await LoadChatHistory();
        }
    }

    private async Task LoadChatHistory()
    {
        var chatId = _chatState.ChatId;

        if (chatId != Guid.Empty)
        {
            var response = await _chatService.GetChatMessagesByChatId(_chatState.ChatId);
            ChatMessages = response.Items.ToList();

            await InvokeAsync(StateHasChanged);
            await JS.InvokeVoidAsync("scrollToBottom", ChatMessagesDiv);
        }
    }

    private async Task SendMessage(string message)
    {
        var chatId = _chatState.ChatId;

        if (!string.IsNullOrWhiteSpace(message))
        {
            if (chatId == Guid.Empty)
            {
                var newChatId = await _chatService.CreateChatSession("New Chat", "");
                
                chatId = newChatId;
                _chatState.SetChatId(newChatId);

                await LoadChatHistory();
                _navigationManager.NavigateTo($"/c/{chatId}");
            }

            var userMessage = CreateUserMessage(chatId, message);
            LatestBotMessage = CreateBotMessage(chatId, string.Empty);

            ChatMessages.Add(userMessage);
            await JS.InvokeVoidAsync("scrollToBottom", ChatMessagesDiv);

            ChatMessages.Add(LatestBotMessage);
            await JS.InvokeVoidAsync("scrollToBottom", ChatMessagesDiv);

            await _chatService.SendMessage(chatId, message, "", "gpt-3.5-turbo");
            _textStreaming.Clear();
        }
    }

    private ChatMessageResponse CreateUserMessage(Guid chatId, string message, ChatMessageType messageType = ChatMessageType.Message)
    {
        var now = _clock.GetLocalNow();

        var userMessage = new ChatMessageResponse
        {
                Id = Guid.NewGuid(),
                ChatId = chatId,
                Type = messageType,
                Author = "user",
                Content = message,
                Timestamp = now
        };

        return userMessage;
    }

    private ChatMessageResponse CreateBotMessage(Guid chatId, string message, ChatMessageType messageType = ChatMessageType.Message)
    {
        var now = _clock.GetLocalNow();

        var chatMessage = new ChatMessageResponse
        {
            Id = Guid.NewGuid(),
            ChatId = chatId,
            Type = messageType,
            Author = "bot",
            Content = message,
            Timestamp = now
        };

        return chatMessage;
    }

    public async ValueTask DisposeAsync()
    {
        _chatState.ChatIdChanged -= async () => await LoadChatHistory();

        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
