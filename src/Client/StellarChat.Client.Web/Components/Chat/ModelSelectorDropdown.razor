@inject IAvailableModelsService _availableModelsService

<MudAutocomplete @bind-Value="CurrentValue"
                 T="string" 
                 Immediate="true" 
                 CoerceValue="@coerceValue"
                 CoerceText="@coerceText"
                 SearchFunc="@SearchAsync"
                 Clearable="true"
                 ResetValueOnEmptyText="true"
                 ShowProgressIndicator="true" 
                 ProgressIndicatorColor="Color.Primary"
                 CloseIcon="@Icons.Material.Filled.Search" 
                 AdornmentColor="Color.Primary" 
                 MaxItems="null"
                 Margin="Margin.Dense"
                 Style="width: 400px" />

@code
{
    public List<AvailableModelsResponse> Models { get; set; } = new();
    private string CurrentValue { get; set; } = string.Empty;

    private bool coerceText;
    private bool coerceValue;

    protected override async Task OnInitializedAsync()
    {
        await LoadModels();

        // TODO: Temporary solution - Should be retrieved from global state indicating the currently selected assistant.
        var selectedModel = "gpt-4o";

        if (!string.IsNullOrEmpty(selectedModel) && Models.Any(model => model.Name == selectedModel))
        {
            CurrentValue = selectedModel;
        }
    }

    private async Task LoadModels()
    {
        var models = await _availableModelsService.BrowseAvailableModels();

        if(models is not null)
        {
            Models = models.ToList();
        }
    }

    private async Task<IEnumerable<string>?> SearchAsync(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return Models.Select(model => model.Name);
        }

        var result = Models
            .Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(model => model.Name);

        return await Task.FromResult(result);
    }
}
