@inject IActionService _actionService

<MudIconButton DisableElevation="false" OnClick="@ToggleOpen" id="prompt-input-plugins-button" Color="Color.Inherit">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="24" height="24">
        <path fill="currentColor" d="M224 96l16-32 32-16-32-16-16-32-16 32-32 16 32 16 16 32zM80 160l26.7-53.3L160 80l-53.3-26.7L80 0 53.3 53.3 0 80l53.3 26.7L80 160zm352 128l-26.7 53.3L352 368l53.3 26.7L432 448l26.7-53.3L512 368l-53.3-26.7L432 288zm70.6-193.8L417.8 9.4C411.5 3.1 403.3 0 395.2 0c-8.2 0-16.4 3.1-22.6 9.4L9.4 372.5c-12.5 12.5-12.5 32.8 0 45.3l84.9 84.9c6.3 6.3 14.4 9.4 22.6 9.4 8.2 0 16.4-3.1 22.6-9.4l363.1-363.2c12.5-12.5 12.5-32.8 0-45.2zM359.5 203.5l-50.9-50.9 86.6-86.6 50.9 50.9-86.6 86.6z" />
    </svg>
</MudIconButton>
<MudPopover Open="_isOpen" OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Paper="false">
    <ChildContent>
        <MudPaper Outlined="true" Class="mx-2">
            <MudAutocomplete @ref="_autocomplete"
                             Value="CurrentValue"
                             Placeholder="Unleash magic 🧙 – pick an action"
                             T="NativeActionResponse"
                             ToStringFunc="@(item => item?.Name)"
                             Immediate="true"
                             CoerceValue="@coerceValue"
                             CoerceText="@coerceText"
                             SearchFunc="@SearchAsync"
                             Clearable="true"
                             ResetValueOnEmptyText="true"
                             ShowProgressIndicator="true"
                             ProgressIndicatorColor="Color.Primary"
                             CloseIcon="@Icons.Material.Filled.Search"
                             AdornmentColor="Color.Primary"
                             MaxItems="null"
                             AutoFocus="false"
                             Margin="Margin.Dense"
                             DisableUnderLine="true"
                             Style="width: 400px"
                             Class="mx-2"
                             ValueChanged="OnValueChanged">
                <ItemTemplate Context="context">
                    <MudText>
                        @context.Name
                    </MudText>
                </ItemTemplate>
                <ItemSelectedTemplate Context="context">
                    <MudText>
                        @context.Name
                    </MudText>
                </ItemSelectedTemplate>
            </MudAutocomplete>
        </MudPaper>
    </ChildContent>
</MudPopover>

@code {
    [Parameter] public EventCallback<NativeActionResponse> ActionChanged { get; set; }
    [Parameter] public NativeActionResponse? CurrentValue { get; set; }
    [Parameter] public List<NativeActionResponse> Actions { get; set; } = new();

    private MudAutocomplete<NativeActionResponse>? _autocomplete;
    
    private bool coerceText;
    private bool coerceValue;
    private bool _isOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadActions();
    }

    private async Task LoadActions()
    {
        var actions = await _actionService.BrowseActions();

        if (actions is not null)
        {
            Actions = actions.ToList();
        }
    }

    private async Task<IEnumerable<NativeActionResponse>> SearchAsync(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return Actions;
        }
        
        var result = Actions
            .Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        
        return await Task.FromResult(result);
    }

    private async Task ToggleOpen()
    {
        _isOpen = !_isOpen;
        await Task.Delay(50);

        if (_autocomplete is not null)
        {
            await _autocomplete.ToggleMenu();
        }
    }

    private void OnValueChanged(NativeActionResponse action)
    {
        if (action is not null)
        {
            ActionChanged.InvokeAsync(action);
            _isOpen = false;
        }
    }
}
