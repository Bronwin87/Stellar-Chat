@inject IAssistantService _assistantService

<MudDrawerContainer Class="mud-height-full">
    <MudDrawer @bind-Open="IsOpen" Anchor="Anchor.Left" DisableOverlay="true" Elevation="8">
        <MudDrawerHeader Class="pr-2 pt-1">
            <MudText Typo="Typo.h6" Class="mt-2">Select or Manage Assistants</MudText>
            <MudSpacer />
            <MudIconButton OnClick="CloseDrawer" Icon="@Icons.Material.Filled.Close" Color="(_IsDarkModeEnabled ? Color.Default : Color.Dark)" />
        </MudDrawerHeader>
        <MudList Clickable="true">
            <MudDivider />
            @foreach (var assistant in Assistants)
            {
                <AssistantItem Assistant="@assistant" />
            }
        </MudList>
    </MudDrawer>
</MudDrawerContainer>

@code 
{
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [CascadingParameter]
    private bool _IsDarkModeEnabled { get; set; }

    public List<AssistantResponse> Assistants { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAssistants();
    }

    private async Task LoadAssistants()
    {
        var response = await _assistantService.BrowseAssistants();
        Assistants = response.Items.ToList();
    }

    private void CloseDrawer()
    {
        IsOpen = false;
        IsOpenChanged.InvokeAsync(IsOpen);
    }
}
