@inject IAssistantService _assistantService

<MudDrawerContainer Class="mud-height-full">
    <MudDrawer @bind-Open="IsOpen" Anchor="Anchor.Left" DisableOverlay="true" Elevation="8">
        @if (isEditing)
        {
            <MudDrawerHeader Class="pr-2 pt-1">
                <MudText Typo="Typo.h6" Class="mt-2">Edit Assistant</MudText>
                <MudSpacer />
                <MudIconButton OnClick="CloseDrawer" Icon="@Icons.Material.Filled.Close" Color="(_IsDarkModeEnabled ? Color.Default : Color.Dark)" />
            </MudDrawerHeader>
            <div>
                <MudDivider />
                <AssistantForm AssistantId="selectedAssistantId" />
            </div>
        }
        else
        {
            <MudDrawerHeader Class="pr-2 pt-1">
                <MudText Typo="Typo.h6" Class="mt-2">Select or Manage Assistants</MudText>
                <MudSpacer />
                <MudIconButton OnClick="CloseDrawer" Icon="@Icons.Material.Filled.Close" Color="(_IsDarkModeEnabled ? Color.Default : Color.Dark)" />
            </MudDrawerHeader>
            <MudList Clickable="true">
                <MudDivider />
                @foreach (var assistant in Assistants)
                {
                    <AssistantItem Assistant="@assistant"
                                   OnEdit="() => EditAssistant(assistant.Id)" />
                }
            </MudList>
        }
    </MudDrawer>
</MudDrawerContainer>

@code 
{
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [CascadingParameter]
    private bool _IsDarkModeEnabled { get; set; }

    private bool isEditing = false;
    private Guid selectedAssistantId;

    public List<AssistantResponse> Assistants { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAssistants();
    }

    private async Task LoadAssistants()
    {
        var response = await _assistantService.BrowseAssistants();
        Assistants = response.Items.ToList();
    }

    private void CloseDrawer()
    {
        IsOpen = false;
        isEditing = false;
        IsOpenChanged.InvokeAsync(IsOpen);
    }

    private void EditAssistant(Guid id)
    {
        selectedAssistantId = id;
        isEditing = true;
    }
}
